version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: jenkins_mcp_enterprise-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Jenkins MCP Enterprise Server
  jenkins_mcp_enterprise-server:
    build:
      context: .
      dockerfile: Dockerfile.jenkins_mcp_enterprise
    container_name: jenkins_mcp_enterprise-server
    depends_on:
      qdrant:
        condition: service_healthy
    environment:
      - QDRANT_HOST=http://qdrant:6333
      - CACHE_DIR=/tmp/mcp-jenkins
      - LOG_LEVEL=INFO
    volumes:
      - jenkins_mcp_enterprise_cache:/tmp/mcp-jenkins
      - ./config:/app/config:ro
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "from jenkins_mcp_enterprise.multi_jenkins_manager import MultiJenkinsManager; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MCP Superassistant Proxy
  mcp-proxy:
    build:
      context: .
      dockerfile: Dockerfile.mcp-proxy
    container_name: jenkins_mcp_enterprise-proxy
    depends_on:
      jenkins_mcp_enterprise-server:
        condition: service_healthy
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
    volumes:
      - ./mcpconfig.docker.json:/app/mcpconfig.json:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/sse"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  qdrant_data:
    driver: local
  jenkins_mcp_enterprise_cache:
    driver: local

networks:
  default:
    name: jenkins_mcp_enterprise-network