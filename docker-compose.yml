services:
  # Vector database for semantic search
  qdrant:
    image: qdrant/qdrant:latest
    container_name: jenkins-mcp-qdrant
    ports:
      - "6335:6333"  # HTTP API (changed to avoid conflict)
      - "6336:6334"  # gRPC API (changed to avoid conflict)
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-net

  # Jenkins MCP Server (Production)
  jenkins-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jenkins-mcp-server
    environment:
      # Jenkins Configuration (Required)
      - JENKINS_URL=${JENKINS_URL:-https://your-jenkins-instance.com}
      - JENKINS_USER=${JENKINS_USER:-your.username@domain.com}
      - JENKINS_TOKEN=${JENKINS_TOKEN}
      
      # Vector Search Configuration
      - QDRANT_HOST=http://qdrant:6333
      - DISABLE_VECTOR_SEARCH=${DISABLE_VECTOR_SEARCH:-false}
      
      # Cache Configuration
      - CACHE_DIR=/app/cache
      - CACHE_MAX_SIZE_MB=${CACHE_MAX_SIZE_MB:-1000}
      - CACHE_RETENTION_DAYS=${CACHE_RETENTION_DAYS:-7}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=/app/logs/jenkins-mcp.log
      
      # MCP Server Configuration
      - MCP_TRANSPORT=stdio
    volumes:
      - jenkins_cache:/app/cache
      - jenkins_logs:/app/logs
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true      # Required for MCP stdio transport
    tty: true            # Required for MCP stdio transport
    networks:
      - mcp-net
    healthcheck:
      test: ["CMD", "python3", "-c", "import mcp_server.server; print('Server importable')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HTTP Proxy for MCP Server (Optional - for HTTP transport)
  jenkins-mcp-proxy:
    build:
      context: .
      dockerfile: Dockerfile.proxy
    container_name: jenkins-mcp-proxy
    ports:
      - "8080:8080"
    environment:
      - MCP_SERVER_HOST=jenkins-mcp-server
      - PROXY_PORT=8080
    depends_on:
      - jenkins-mcp-server
    restart: unless-stopped
    networks:
      - mcp-net
    profiles:
      - http-proxy  # Only start with --profile http-proxy

  # HTTP Streaming Server (Native HTTP transport)
  jenkins-mcp-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jenkins-mcp-http
    ports:
      - "8000:8000"
    environment:
      # Jenkins Configuration (Required)
      - JENKINS_URL=${JENKINS_URL:-https://your-jenkins-instance.com}
      - JENKINS_USER=${JENKINS_USER:-your.username@domain.com}
      - JENKINS_TOKEN=${JENKINS_TOKEN}
      
      # Vector Search Configuration
      - QDRANT_HOST=http://qdrant:6333
      - DISABLE_VECTOR_SEARCH=${DISABLE_VECTOR_SEARCH:-false}
      
      # Cache Configuration
      - CACHE_DIR=/app/cache
      - CACHE_MAX_SIZE_MB=${CACHE_MAX_SIZE_MB:-1000}
      - CACHE_RETENTION_DAYS=${CACHE_RETENTION_DAYS:-7}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=/app/logs/jenkins-mcp.log
      
      # MCP Server Configuration - HTTP Streaming
      - MCP_TRANSPORT=streamable-http
      - MCP_PORT=8000
      - MCP_HOST=0.0.0.0
    volumes:
      - jenkins_cache:/app/cache
      - jenkins_logs:/app/logs
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - http-streaming  # Only start with --profile http-streaming

volumes:
  qdrant_data:
    driver: local
  jenkins_cache:
    driver: local
  jenkins_logs:
    driver: local

networks:
  mcp-net:
    driver: bridge